import pandas as pd
from pymongo import MongoClient
from airflow.providers.postgres.hooks.postgres import PostgresHook
import logging
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy import Table, MetaData
from airflow.models import Variable

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGO_URI =  Variable.get("mongo_uri")
DB_NAME = Variable.get("mongo_schema")

mongo_client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
mongo_db = mongo_client[DB_NAME]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Postgres —á–µ—Ä–µ–∑ Airflow Hook
pg_hook = PostgresHook(postgres_conn_id='my_postgres_conn')
engine = pg_hook.get_sqlalchemy_engine()


def transform_tourists(df):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã tourists"""
    df["registration_date"] = pd.to_datetime(df["registration_date"]).dt.date # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞—Ç—ã –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.
    return df[['user_id', 'name', 'country', 'registration_date']] # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü–µ –≤ Postgres

def transform_bookings(df):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã bookings"""
    df["start_date"] = pd.to_datetime(df["start_date"]).dt.date
    df["end_date"] = pd.to_datetime(df["end_date"]).dt.date
    return df[['booking_id', 'user_id', 'destination', 'type', 'category', 'status', 'price', 'start_date', 'end_date']]

def transform_visits(df):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã visits"""
    df["timestamp"] = pd.to_datetime(df["timestamp"]).dt.date
    return df[['visit_id', 'user_id', 'place_id', 'timestamp']]

def transform_searches(df):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã searches"""
    df["timestamp"] = pd.to_datetime(df["timestamp"]).dt.date
    return df[['search_id', 'user_id', 'search_country', 'timestamp', 'converted_to_booking']]

def transform_pois(df):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã pois"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∏—Ä–æ—Ç—É –∏–∑ –ø–æ–ª—è 'point'. 
    # –ï—Å–ª–∏ 'point' —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º, –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É 'lat', –∏–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º None.
    df['latitude'] = df['point'].apply(lambda x: x.get('lat') if isinstance(x, dict) else None)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ª–≥–æ—Ç—É –∏–∑ –ø–æ–ª—è 'point'.
    # –ï—Å–ª–∏ 'point' —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º, –±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É 'lon', –∏–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º None.
    df['longitude'] = df['point'].apply(lambda x: x.get('lon') if isinstance(x, dict) else None)
    df['poi_timestamp'] = pd.to_datetime(df['timestamp'])
    df['rating'] = df.get('rate') if 'rate' in df.columns else df.get('rating')
    return df[['xid', 'name', 'description', 'image', 'kinds', 'otm_url', 'country_code', 'latitude', 'longitude', 'poi_timestamp', 'rating']]

def transform_countries(df):
    """–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã countries"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã.
    # –í –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö 'name' ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'common' (–æ–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) –∏ 'official' (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ).
    # –ï—Å–ª–∏ 'name' —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º, –±–µ—Ä—ë–º 'common', –∏–Ω–∞—á–µ None.
    df['country_name'] = df['name'].apply(lambda x: x.get('common') if isinstance(x, dict) else None)
    df['country_code'] = df['cca2']
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∏—Ä–æ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ latlng.
    # –ï—Å–ª–∏ 'latlng' ‚Äî —Å–ø–∏—Å–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç, –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π (—à–∏—Ä–æ—Ç—É), –∏–Ω–∞—á–µ None.
    df['latitude'] = df['latlng'].apply(lambda x: x[0] if isinstance(x, list) and len(x) > 0 else None)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ª–≥–æ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ latlng.
    # –ï—Å–ª–∏ 'latlng' ‚Äî —Å–ø–∏—Å–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, –±–µ—Ä—ë–º –≤—Ç–æ—Ä–æ–π (–¥–æ–ª–≥–æ—Ç—É), –∏–Ω–∞—á–µ None.
    df['longitude'] = df['latlng'].apply(lambda x: x[1] if isinstance(x, list) and len(x) > 1 else None)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–ª–∏—Ü—É —Å—Ç—Ä–∞–Ω—ã.
    # –í –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö 'capital' ‚Äî —Å–ø–∏—Å–æ–∫ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–∏—Ü), –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é, –∏–Ω–∞—á–µ None.
    df['capital'] = df['capital'].apply(lambda x: x[0] if isinstance(x, list) and len(x) > 0 else None)
    df['region'] = df['region']
    df['subregion'] = df['subregion']
    df['population'] = df['population']
    return df[['country_name', 'capital', 'country_code', 'latitude', 'longitude', 'region', 'subregion', 'population']]

def safe_insert(df, table_name, schema='ods', conflict_cols=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    # –ï—Å–ª–∏ DataFrame –ø—É—Å—Ç–æ–π ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    if df.empty:
        logging.warning(f"DataFrame –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{schema}.{table_name}' –ø—É—Å—Ç.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –∏–∑ PostgreSQL
    metadata = MetaData()
    metadata.reflect(bind=engine, schema=schema)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    table = Table(table_name, metadata, autoload_with=engine, schema=schema)

    # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ INSERT —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ DataFrame
    stmt = insert(table).values(df.to_dict(orient='records'))

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã conflict_cols ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º ON CONFLICT DO NOTHING
    if conflict_cols:
        stmt = stmt.on_conflict_do_nothing(index_elements=conflict_cols)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    with engine.begin() as conn:
        result = conn.execute(stmt)
        logging.info(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ {result.rowcount} —Å—Ç—Ä–æ–∫ –≤ '{schema}.{table_name}'")

def transfer_collection(collection_name, table_name, transform, schema='ods', conflict_cols=None):
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ Postgres —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ MongoDB
        data = list(mongo_db[collection_name].find())
        if not data:
            logging.warning(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è MongoDB '{collection_name}' –ø—É—Å—Ç–∞!")
            return
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ DataFrame
        df = pd.DataFrame(data)
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        df = transform(df)

        if df.empty:
            logging.warning(f"–ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' –ø—É—Å—Ç–∞.")
            return
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤—Å—Ç–∞–≤–∫—É –≤ PostgreSQL
        safe_insert(df, table_name, schema=schema, conflict_cols=conflict_cols)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{collection_name}' ‚Üí '{schema}.{table_name}': {e}")

def load_data():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
    try:
        logging.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ Postgres ODS...")
        transfer_collection("synthetic_tourists", "tourists", transform_tourists, conflict_cols=["user_id"])
        transfer_collection("synthetic_bookings", "bookings", transform_bookings, conflict_cols=["booking_id"])
        transfer_collection("synthetic_visits", "visits", transform_visits, conflict_cols=["visit_id"])
        transfer_collection("synthetic_searches", "search_events", transform_searches, conflict_cols=["search_id"])
        transfer_collection("opentripmap_pois_detailed", "opentripmap_pois", transform_pois, conflict_cols=["id"])
        transfer_collection("rest_countries", "rest_countries", transform_countries, conflict_cols=["id"])
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
